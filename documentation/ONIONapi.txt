data.frame clusterSmallMolecules( file ) {
	//file - nm-lipidomics.txt (tylko male czasteczki), pierwsza kolumna
	//K klastrów (Chebi <-> Pierwsze dziecko Chebi lub pierwszy Rodzic Chebi)
	//  H1    H2
	//1 123   ABC
	//2 231   DEF
	//NIE do pliku, jako obiekt.
	//output - fa_mapping.txt (node <-> dziecko || rodzic) w ID z Chebi by ontology
}


list[list] mapReactomePathways <- function ( data.frame fa_mapping.txt, number organismID) {
//Be really careful when you choose output.
	//input - fa_mapping.txt
	//all mapReactome.R file
	//find Gens.
	//smallMolecules[Genes]
	//output genesSymbolList smallMolecules[Genes] K[x1...xn]
}

list[list] getStringNeighbours <- function (list genesSymbolList, number organismID) { //ADDITIONAL: network searkch level
	//input
	//All getStringNeighbor.R
	//Rodzic[dzieci]
	//FOTO!!!
	//output neighboursList - wszystkie są bialkami Rodzic[dzieci] X[a1...aj]
}

data.frame mapStringIDtoGeneID <- function (list neighboursList, string pochodzenieGensID) { //ADDITIONA - pochodzenieGensID
	//input  pochodzenieGensID - z jakiej bazy są identyfikatory genów (HGNC)
	//output
	//string     gene
	//ACAT1      ABBBC
	//output
	use Gene ID matchin Gene IDs in user input
}

data.frame divideInitialTranscriptomicsData(data.fram transcriptomicsData, data.frame) {
	//from ONION.sh
	#select subset of transcriptomics data baed on string-extended list of gene IDs
    grep -w -f string-g_$G.hgnc $1 > temp
    #list of genes in groups
    cut -f1 temp >> genes_t
    head -1 $1 > headg
    cat headg temp > transcriptomics-group_$G.txt
    rm -f group temp gr
}

data.frame divideInitialLipidomicsData(data.fram LipidomicsData, data.frame) {
	//from ONION.sh
	#split lipid data into groups
	grep -w $G $3 | cut -f1 > gr
	grep -w -f gr $2 > temp
	head -1 $2 > headl
	cat headl temp > lipidomics-group_$G.txt
	rm -f temp
}
